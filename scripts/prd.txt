<context>
# Overview
이 제품은 도커 기반 MCP 서버로, AI가 지정된 도큐먼트를 읽고, 질문에 답하거나 코드를 작성할 수 있도록 지원합니다.
주요 사용자는 프로그래머이며, AI가 기존에 학습하지 않은 새로운 정보를 프롬프트로 받아, 그에 맞는 응답을 생성할 수 있도록 설계되었습니다.

# Core Features
1. 도큐먼트 다운로드
- 웹브라우저를 통해 적절한 도큐먼트를 다운로드합니다.
- 다운로드된 도큐먼트는 AI가 읽고 답변을 생성하는 데 사용되므로 매우 중요합니다.
- AI가 MCP에게 '도큐먼트 다운로드 프로토콜 시작'을 요청하면, MCP는 AI의 명령에 따라 링크를 받아오고, PDF인지 HTML인지 판별하여 적절한 방식으로 저장합니다.

2. 도큐먼트 삭제
- 저장되어 있는 도큐먼트를 삭제하는 기능입니다.
- AI가 MCP에게 특정 도큐먼트 삭제를 요청하면, MCP가 해당 도큐먼트를 삭제합니다.
- 도큐먼트의 재설치나 최신화 작업을 위해 필요합니다.

3. 도큐먼트 내용 읽기
- 사용자가 AI에게 특정 내용에 대해 질문하면, AI는 MCP에게 도큐먼트 내용을 요청합니다.
- 문서 로딩 -> 전처리 -> 응답(RAG기반)
- MCP는 해당 도큐먼트의 내용을 AI에게 전달하고, AI는 이를 기반으로 사용자의 질문에 답변합니다.

# User Experience
- 주요 사용자: 도커 서버를 설치하고 MCP 서버를 세팅할 수 있는 개발자
- 주요 사용 흐름:
  1. 인간 → AI: "특정 내용에 대해 알려줘"와 같은 질의
  2. AI → MCP: 해당 질의와 관련된 도큐먼트 내용 읽기 요청
  3. MCP: 도큐먼트가 있으면 해당 내용을 AI에게 전달, 없으면 '도큐먼트 다운로드' 명령을 AI에게 전달
- UI/UX: 모든 상호작용은 채팅창을 통해 이루어지며, 사용자 경험이 매끄럽고 자연스럽게 연결되어야 함
</context>
<PRD>
# Technical Architecture
- 시스템 구성 요소: 도커, MCP SDK, 파이썬, AI(윈드서프 기반), Playwright 크롤링 모듈, LLAMAINDEX
- 데이터 모델: (재귀적으로) 탐색한 텍스트 파일과 전처리(청킹/임베딩)된 데이터를 파일로 보관
- AI와의 통신: MCP SDK를 통해 AI와 연동
- 주요 API:
  1. 도큐먼트 다운로드: Playwright를 이용한 웹 크롤링 및 파일 저장, LLAMAINDEX 이용하여 전처리
  2. 도큐먼트 삭제: 저장된 도큐먼트 파일 삭제
  3. 도큐먼트 내용 읽기: 저장된 파일을 불러와 전처리 후 AI에 전달, LLAMAINDEX 이용하여 읽음
- 인프라 요구사항: 도커 환경에서 동작할 수 있어야 함

# Development Roadmap
- 1단계(MVP): 지금까지 작성한 모든 기능(도큐먼트 다운로드, 삭제, 읽기, 전처리, AI 연동, 도커 환경 등)이 반드시 구현되어야 함
- 2, 3단계(추후 확장/개선): 미정

# Logical Dependency Chain
- 개발 순서:
  1. 도큐먼트 다운로드 및 전처리 기능 구현 (LLAMAINDEX)
  2. 도큐먼트 삭제 기능 구현
  3. 도큐먼트 내용 읽기 및 응답 기능 구현 (LLAMAINDEX)
- 각 기능은 독립적으로 개발하되, 점진적으로 확장 및 개선 가능하도록 설계

# Risks and Mitigations
- 예상되는 위험:
  1. LLAMAINDEX의 커스터마이징 한계
  2. robots.txt 정책과의 상충 문제
- 대응 방안:
  1. 초기에는 LLAMAINDEX로 개발을 진행하되, 한계가 명확해지면 다른 라이브러리로 전환
  2. robots.txt 락/언락 기능을 소스코드를 직접 수정해야만 사용할 수 있도록 숨겨서 제공

# Appendix  
하루 안에 끝내고 뺀다.
</PRD>